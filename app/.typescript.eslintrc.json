{
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": ["./tsconfig.*?.json"]
  },
  "extends": [
    "plugin:@typescript-eslint/recommended",
    //    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:@typescript-eslint/strict",
    "plugin:@nrwl/nx/typescript"
  ],

  "rules": {
    "@typescript-eslint/consistent-type-definitions": 0,
    "@typescript-eslint/no-unnecessary-type-assertion": "error",
    // To be evaluated
    "@typescript-eslint/no-empty-interface": 0,
    "@typescript-eslint/no-unused-vars": 1,
    "@typescript-eslint/await-thenable": 0, // Causes issues with await for  "checkComponentIdForSuperintendent"
    "@typescript-eslint/no-floating-promises": 1,
    "@typescript-eslint/no-for-in-array": 1,
    "@typescript-eslint/no-misused-promises": [
      "warn",
      {
        // Should we enable parts of this? This helps catch returned promises where no promise is expected
        "checksVoidReturn": false
      }
    ],
    "@typescript-eslint/no-unsafe-argument": 1,
    "@typescript-eslint/no-unsafe-assignment": 1,
    "@typescript-eslint/no-unsafe-call": 1,
    "@typescript-eslint/no-unsafe-member-access": 1,
    "@typescript-eslint/no-unsafe-return": 1,
    "@typescript-eslint/require-await": 1,
    "@typescript-eslint/restrict-plus-operands": 1,
    "@typescript-eslint/restrict-template-expressions": 1,
    "@typescript-eslint/unbound-method": 1,
    "@typescript-eslint/prefer-nullish-coalescing": [
      1,
      { "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": true }
    ]
  }
}
